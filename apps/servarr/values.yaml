######################
# Jellyfin           #
######################

jellyfin:
  global:
    nameOverride: jellyfin

  controllers:
    main:
      strategy: RollingUpdate

#      pod:
#        securityContext:
#          runAsUser: 568
#          runAsGroup: 568
#          fsGroup: 568
#          fsGroupChangePolicy: OnRootMismatch

      containers:
        main:
          image:
            repository: ghcr.io/linuxserver/jellyfin
            tag: version-10.8.10-1
          env:
            TZ: Europe/Berlin
            PUID: 1000
            PGID: 1000
          resources:
            requests:
              gpu.intel.com/i915: "1"
            limits:
              gpu.intel.com/i915: "1"
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /health
                  port: 8096
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 50Gi
      annotations:
        'k8up.io/backup': 'true'
    mediarr:
      enabled: true
      existingClaim: mediarr
      advancedMounts:
        main:
          main:
            - path: filme
              subPath: /filme
            - path: serien
              subPath: /serien

  service:
    main:
      ports:
        http:
          port: 8096


  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host "jellyfin.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: jellyfin-tls-certificate
          hosts:
            - *host


######################
# Jellyseerr         #
######################

jellyseerr:
  global:
    nameOverride: jellyseerr

  controllers:
    main:
      strategy: RollingUpdate

      #      pod:
      #        securityContext:
      #          runAsUser: 568
      #          runAsGroup: 568
      #          fsGroup: 568
      #          fsGroupChangePolicy: OnRootMismatch

      containers:
        main:
          image:
            repository: fallenbagel/jellyseerr
            tag: 1.7.0
          env:
            TZ: Europe/Berlin
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: 5055
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      mountPath: /app/config
      annotations:
        'k8up.io/backup': 'true'

  service:
    main:
      ports:
        http:
          port: 5055

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host "jellyseerr.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: jellyseerr-tls-certificate
          hosts:
            - *host


######################
# Prowlarr           #
######################

prowlarr:
  global:
    nameOverride: prowlarr

  controllers:
    main:
      strategy: RollingUpdate

      pod:
#        securityContext:
#          runAsUser: 568
#          runAsGroup: 568
#          fsGroup: 568
#          fsGroupChangePolicy: OnRootMismatch
      annotations:
        setGateway: "true"
        k8up.io/backupcommand: >
          sh -c 'APIKEY=$(xmlstarlet sel -t -v //ApiKey /config/config.xml);
          OLD_ID=$(curl -s "http://localhost:9696/api/v1/system/backup?apikey=$APIKEY" | jq -r ".|last.id");
          curl -s -X DELETE "http://localhost:9696/api/v1/system/backup/$OLD_ID?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}";
          curl -s -X POST "http://localhost:9696/api/v1/command?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}"; sleep 5;
          BACKUP_URL=$(curl -s "http://localhost:9696/api/v1/system/backup?apikey=$APIKEY" | jq -r ".[0].path");
          curl -s "http://localhost:9696$BACKUP_URL?apikey=$APIKEY"'
        k8up.io/file-extension: .zip

      containers:
        main:
          image:
            repository: ghcr.io/linuxserver/prowlarr
            tag: version-1.7.4.3769
          env:
            TZ: Europe/Berlin
            PUID: 1000
            PGID: 1000
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: 9696
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 2
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      annotations:
        'k8up.io/backup': 'false'

  service:
    main:
      ports:
        http:
          port: 9696

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "prowlarr.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: prowlarr-tls-certificate
          hosts:
            - *host


######################
# Radarr             #
######################

radarr:
  global:
    nameOverride: radarr

  controllers:
    main:
      strategy: RollingUpdate

      pod:
#        securityContext:
#          runAsUser: 568
#          runAsGroup: 568
#          fsGroup: 568
#          fsGroupChangePolicy: OnRootMismatch
      annotations:
        setGateway: "true"
        k8up.io/backupcommand: >
          sh -c 'APIKEY=$(xmlstarlet sel -t -v //ApiKey /config/config.xml);
          OLD_ID=$(curl -s "http://localhost:7878/api/v3/system/backup?apikey=$APIKEY" | jq -r ".|last.id");
          curl -s -X DELETE "http://localhost:7878/api/v3/system/backup/$OLD_ID?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}";
          curl -s -X POST "http://localhost:7878/api/v3/command?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}"; sleep 5;
          BACKUP_URL=$(curl -s "http://localhost:7878/api/v3/system/backup?apikey=$APIKEY" | jq -r ".[0].path");
          curl -s "http://localhost:7878$BACKUP_URL?apikey=$APIKEY"'
        k8up.io/file-extension: .zip

      containers:
        main:
          image:
            repository: ghcr.io/linuxserver/radarr
            tag: version-4.7.5.7809
          env:
            TZ: Europe/Berlin
            PUID: 1000
            PGID: 1000
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: 7878
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 2
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      annotations:
        'k8up.io/backup': 'false'
    mediarr:
      enabled: true
      existingClaim: mediarr
      advancedMounts:
        main:
          main:
            - path: filme
              subPath: /filme
            - path: downloads
              subPath: /downloads/mediarr

  service:
    main:
      ports:
        http:
          port: 7878

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "radarr.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: radarr-tls-certificate
          hosts:
            - *host


######################
# Sonarr             #
######################

sonarr:
  global:
    nameOverride: sonarr

  controllers:
    main:
      strategy: RollingUpdate

      pod:
      #        securityContext:
      #          runAsUser: 568
      #          runAsGroup: 568
      #          fsGroup: 568
      #          fsGroupChangePolicy: OnRootMismatch
      annotations:
        setGateway: "true"
        k8up.io/backupcommand: >
          sh -c 'APIKEY=$(xmlstarlet sel -t -v //ApiKey /config/config.xml);
          OLD_ID=$(curl -s "http://localhost:8989/api/v3/system/backup?apikey=$APIKEY" | jq -r ".|last.id");
          curl -s -X DELETE "http://localhost:8989/api/v3/system/backup/$OLD_ID?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}";
          curl -s -X POST "http://localhost:8989/api/v3/command?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}"; sleep 5;
          BACKUP_URL=$(curl -s "http://localhost:8989/api/v3/system/backup?apikey=$APIKEY" | jq -r ".[0].path");
          curl -s "http://localhost:8989$BACKUP_URL?apikey=$APIKEY"'
        k8up.io/file-extension: .zip

      containers:
        main:
          image:
            repository: ghcr.io/linuxserver/sonarr
            tag: develop-version-4.0.0.710 # TODO: switch to stable after v4 release
          env:
            TZ: Europe/Berlin
            PUID: 1000
            PGID: 1000
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: 8989
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 2
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      annotations:
        'k8up.io/backup': 'false'
    mediarr:
      enabled: true
      existingClaim: mediarr
      advancedMounts:
        main:
          main:
            - path: serien
              subPath: /serien
            - path: downloads
              subPath: /downloads/mediarr

  service:
    main:
      ports:
        http:
          port: 8989

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "sonarr.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: sonarr-tls-certificate
          hosts:
            - *host

######################
# Bazarr             #
######################

bazarr:
  global:
    nameOverride: bazarr

  controllers:
    main:
      strategy: RollingUpdate

      pod:
      #        securityContext:
      #          runAsUser: 568
      #          runAsGroup: 568
      #          fsGroup: 568
      #          fsGroupChangePolicy: OnRootMismatch
      annotations:
        setGateway: "true"
        k8up.io/backupcommand: >
          sh -c 'APIKEY=$(grep -m 1 "apikey" /config/config/config.ini | cut -d "=" -f 2 | xargs);
          OLD_ID=$(curl -s "http://localhost:6767/api/system/backups?apikey=$APIKEY" | jq -r ".data|last.filename");
          curl -s -X DELETE "http://localhost:6767/api/system/backups?filename=$OLD_ID&apikey=$APIKEY";
          curl -s -X POST "http://localhost:6767/api/system/backups?apikey=$APIKEY"; sleep 5;
          FILENAME=$(curl -s "http://localhost:6767/api/system/backups?apikey=$APIKEY" | jq -r ".data[0].filename");
          curl -s "http://localhost:6767/system/backup/download/$FILENAME?apikey=$APIKEY"'
        k8up.io/file-extension: .zip

      containers:
        main:
          image:
            repository: ghcr.io/linuxserver/bazarr
            tag: version-v1.3.1
          env:
            TZ: Europe/Berlin
            PUID: 1000
            PGID: 1000
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: 6767
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 2
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      annotations:
        'k8up.io/backup': 'false'
    mediarr:
      enabled: true
      existingClaim: mediarr
      advancedMounts:
        main:
          main:
            - path: filme
              subPath: /filme
            - path: serien
              subPath: /serien

  service:
    main:
      ports:
        http:
          port: 6767

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "bazarr.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: bazarr-tls-certificate
          hosts:
            - *host


######################
# Autobrr            #
######################

autobrr:
  global:
    nameOverride: autobrr

  controllers:
    main:
      strategy: RollingUpdate

      pod:
      #        securityContext:
      #          runAsUser: 568
      #          runAsGroup: 568
      #          fsGroup: 568
      #          fsGroupChangePolicy: OnRootMismatch
      annotations:
        setGateway: "true"

      containers:
        main:
          image:
            repository: ghcr.io/autobrr/autobrr
            tag: v1.33.0
          env:
            TZ: Europe/Berlin
            AUTOBRR__HOST: 0.0.0.0
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /api/healthz/liveness
                  port: 7474
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 2
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      annotations:
        'k8up.io/backup': 'true'

  service:
    main:
      ports:
        http:
          port: 7474

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "autobrr.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: autobrr-tls-certificate
          hosts:
            - *host


######################
# Transmission       #
######################

transmission:
  global:
    nameOverride: transmission

  controllers:
    main:
      strategy: RollingUpdate

      pod:
        hostname: transmission
        annotations:
          setGateway: "true"
        securityContext:
          runAsUser: 568
          runAsGroup: 568
          fsGroup: 568
          fsGroupChangePolicy: OnRootMismatch

      initContainers:
        01-init-themes:
          name: theme-provider
          image:
            repository: registry.gitlab.com/antoncuranz/transmission-themes
            tag: latest
          command:
            - sh
          args:
            - -c
            - |
              echo "Copying themes..."
              cp -R /opt/transmission-ui/* /themes

      containers:
        main:
          image:
            repository: ghcr.io/onedr0p/transmission
            tag: 4.0.4
          env:
            TZ: Europe/Berlin
            TRANSMISSION__BLOCKLIST_URL: "https://github.com/Naunter/BT_BlockLists/raw/master/bt_blocklists.gz"
            TRANSMISSION__DOWNLOAD_DIR: "/downloads/mediarr"
            TRANSMISSION__INCOMPLETE_DIR_ENABLED: false
            TRANSMISSION__RPC_PORT: &port 9091
            TRANSMISSION__PEER_PORT: 9453
            TRANSMISSION_WEB_HOME: "/opt/transmission-ui/transmissionic"
            TRANSMISSION__MESSAGE_LEVEL: 3

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      annotations:
        'k8up.io/backup': 'true'
    mediarr:
      enabled: true
      existingClaim: mediarr
      subPath: downloads
      mountPath: /downloads/mediarr
    autobrr:
      enabled: true
      existingClaim: autobrr
      mountPath: /downloads/autobrr
    themes:
      enabled: true
      type: emptyDir
      advancedMounts:
        main:
          01-init-themes:
            - path: /themes
          main:
            - path: /opt/transmission-ui

  service:
    main:
      ports:
        http:
          port: *port

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "transmission.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: transmission-tls-certificate
          hosts:
            - *host
