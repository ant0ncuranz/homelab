######################
# Jellyfin           #
######################

jellyfin:
  global:
    nameOverride: jellyfin
  controller:
    strategy: RollingUpdate
  image:
    repository: ghcr.io/linuxserver/jellyfin
    tag: version-10.8.10-1
  env:
    TZ: "Europe/Berlin"
  podAnnotations:
    setGateway: "false"
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 50Gi
      annotations:
        'k8up.io/backup': 'true'
    filme:
      enabled: true
      storageClass: truenas-nfs
      accessMode: ReadWriteMany
      size: 1Ti
      mountPath: /filme
      annotations:
        'k8up.io/backup': 'false'
    serien:
      enabled: true
      storageClass: truenas-nfs
      accessMode: ReadWriteMany
      size: 1.5Ti
      mountPath: /serien
      annotations:
        'k8up.io/backup': 'false'
  service:
    main:
      ports:
        http:
          port: &port 8096
  probes:
    liveness: &probes
      enabled: true
      custom: true
      spec:
        httpGet:
          path: /health
          port: *port
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3
    readiness: *probes
    startup:
      enabled: false
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host "jellyfin.serverton.de"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: jellyfin-tls-certificate
          hosts:
            - *host
  resources:
    requests: 
      gpu.intel.com/i915: "1" 
    limits: 
      gpu.intel.com/i915: "1"


######################
# Jellyseerr         #
######################

jellyseerr:
  global:
    nameOverride: jellyseerr
  controller:
    strategy: RollingUpdate
  image:
    repository: fallenbagel/jellyseerr
    tag: 1.7.0
  env:
    TZ: Europe/Berlin
    PUID: 1000
    PGID: 1000
  podAnnotations:
    setGateway: "false"
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      mountPath: /app/config
      annotations:
        'k8up.io/backup': 'true'
  service:
    main:
      ports:
        http:
          port: &port 5055
  probes:
    liveness: &probes
      enabled: true
      custom: true
      spec:
        httpGet:
          path: /ping
          port: *port
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3
    readiness: *probes
    startup:
      enabled: false
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host "jellyseerr.serverton.de"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: jellyseerr-tls-certificate
          hosts:
            - *host


######################
# Prowlarr           #
######################

prowlarr:
  global:
    nameOverride: prowlarr
  controller:
    strategy: RollingUpdate
  image:
    repository: ghcr.io/linuxserver/prowlarr
    tag: version-1.7.4.3769
  env:
    TZ: Europe/Berlin
    PUID: 1000
    PGID: 1000
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      annotations:
        'k8up.io/backup': 'false'
  podAnnotations:
    k8up.io/backupcommand: >
      sh -c 'APIKEY=$(xmlstarlet sel -t -v //ApiKey /config/config.xml);
      OLD_ID=$(curl -s "http://localhost:9696/api/v1/system/backup?apikey=$APIKEY" | jq -r ".|last.id");
      curl -s -X DELETE "http://localhost:9696/api/v1/system/backup/$OLD_ID?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}";
      curl -s -X POST "http://localhost:9696/api/v1/command?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}"; sleep 5;
      BACKUP_URL=$(curl -s "http://localhost:9696/api/v1/system/backup?apikey=$APIKEY" | jq -r ".[0].path");
      curl "http://localhost:9696$BACKUP_URL?apikey=$APIKEY"'
    k8up.io/file-extension: .zip
  service:
    main:
      ports:
        http:
          port: &port 9696
  probes:
    liveness: &probes
      enabled: true
      custom: true
      spec:
        httpGet:
          path: /ping
          port: *port
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 2
        failureThreshold: 3
    readiness: *probes
    startup:
      enabled: false
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "prowlarr.serverton.de"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: prowlarr-tls-certificate
          hosts:
            - *host


######################
# Radarr             #
######################

radarr:
  global:
    nameOverride: radarr
  controller:
    strategy: RollingUpdate
  image:
    repository: ghcr.io/linuxserver/radarr
    tag: version-4.7.5.7809
  env:
    TZ: Europe/Berlin
    PUID: 1000
    PGID: 1000
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      annotations:
        'k8up.io/backup': 'false'
    filme:
      enabled: true
      existingClaim: servarr-jellyfin-filme
      mountPath: /filme
    data:
      enabled: true
      existingClaim: servarr-transmission-downloads
      mountPath: /data
  podAnnotations:
    k8up.io/backupcommand: >
      sh -c 'APIKEY=$(xmlstarlet sel -t -v //ApiKey /config/config.xml);
      OLD_ID=$(curl -s "http://localhost:7878/api/v3/system/backup?apikey=$APIKEY" | jq -r ".|last.id");
      curl -s -X DELETE "http://localhost:7878/api/v3/system/backup/$OLD_ID?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}";
      curl -s -X POST "http://localhost:7878/api/v3/command?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}"; sleep 5;
      BACKUP_URL=$(curl -s "http://localhost:7878/api/v3/system/backup?apikey=$APIKEY" | jq -r ".[0].path");
      curl "http://localhost:7878$BACKUP_URL?apikey=$APIKEY"'
    k8up.io/file-extension: .zip
  service:
    main:
      ports:
        http:
          port: &port 7878
  probes:
    liveness: &probes
      enabled: true
      custom: true
      spec:
        httpGet:
          path: /ping
          port: *port
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 2
        failureThreshold: 3
    readiness: *probes
    startup:
      enabled: false
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "radarr.serverton.de"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: radarr-tls-certificate
          hosts:
            - *host


######################
# Sonarr             #
######################

sonarr:
  global:
    nameOverride: sonarr
  controller:
    strategy: RollingUpdate
  image:
    repository: ghcr.io/linuxserver/sonarr
    tag: develop-version-4.0.0.703 # TODO: switch to stable after v4 release
  env:
    TZ: Europe/Berlin
    PUID: 1000
    PGID: 1000
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      annotations:
        'k8up.io/backup': 'false'
    serien:
      enabled: true
      existingClaim: servarr-jellyfin-serien
      mountPath: /serien
    data:
      enabled: true
      existingClaim: servarr-transmission-downloads
      mountPath: /data
  podAnnotations:
    k8up.io/backupcommand: >
      sh -c 'APIKEY=$(xmlstarlet sel -t -v //ApiKey /config/config.xml);
      OLD_ID=$(curl -s "http://localhost:8989/api/v3/system/backup?apikey=$APIKEY" | jq -r ".|last.id");
      curl -s -X DELETE "http://localhost:8989/api/v3/system/backup/$OLD_ID?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}";
      curl -s -X POST "http://localhost:8989/api/v3/command?apikey=$APIKEY" -H "Content-Type: application/json" -d "{\"name\":\"Backup\"}"; sleep 5;
      BACKUP_URL=$(curl -s "http://localhost:8989/api/v3/system/backup?apikey=$APIKEY" | jq -r ".[0].path");
      curl "http://localhost:8989$BACKUP_URL?apikey=$APIKEY"'
    k8up.io/file-extension: .zip
  service:
    main:
      ports:
        http:
          port: &port 8989
  probes:
    liveness: &probes
      enabled: true
      custom: true
      spec:
        httpGet:
          path: /ping
          port: *port
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 2
        failureThreshold: 3
    readiness: *probes
    startup:
      enabled: false
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "sonarr.serverton.de"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: sonarr-tls-certificate
          hosts:
            - *host


######################
# Transmission       #
######################

transmission:
  global:
    nameOverride: transmission
  controller:
    strategy: RollingUpdate
  image:
    repository: ghcr.io/linuxserver/transmission
    tag: version-4.0.4-r0
  env:
    TZ: Europe/Berlin
    PEERPORT: 9453
    TRANSMISSION_WEB_HOME: "/opt/transmission-ui/transmissionic"
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      annotations:
        'k8up.io/backup': 'true'
    downloads:
      enabled: true
      storageClass: truenas-nfs
      accessMode: ReadWriteMany
      size: 200Gi
      mountPath: /downloads
      annotations:
        'k8up.io/backup': 'false'
    themes:
      enabled: true
      type: emptyDir
      mountPath: /opt/transmission-ui
      annotations:
        'k8up.io/backup': 'false'
  initContainers:
    theme-provider:
      name: theme-provider
      image: registry.gitlab.com/antoncuranz/transmission-themes:latest
      command:
        - sh
      args:
        - -c
        - |
          echo "Copying themes..."
          cp -R /opt/transmission-ui/* /themes
      volumeMounts:
        - name: themes
          mountPath: /themes
  service:
    main:
      ports:
        http:
          port: 9091
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "transmission.serverton.de"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: transmission-tls-certificate
          hosts:
            - *host