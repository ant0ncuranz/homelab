######################
# Jellyfin           #
######################

jellyfin:
  global:
    nameOverride: jellyfin
  controller:
    strategy: RollingUpdate
  image:
    repository: linuxserver/jellyfin
    tag: 10.8.10
  env:
    TZ: "Europe/Berlin"
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
    filme:
      enabled: true
      accessMode: ReadWriteOnce
      size: 5Gi # TODO
      mountPath: /filme
    serien:
      enabled: true
      accessMode: ReadWriteOnce
      size: 5Gi # TODO
      mountPath: /serien
  service:
    main:
      ports:
        http:
          port: &port 8096
  probes:
    liveness: &probes
      enabled: true
      custom: true
      spec:
        httpGet:
          path: /health
          port: *port
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3
    readiness: *probes
    startup:
      enabled: false
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.cloudton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host "jellyfin.cloudton.de"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: jellyfin-tls-certificate
          hosts:
            - *host


######################
# Jellyseerr         #
######################

jellyseerr:
  global:
    nameOverride: jellyseerr
  controller:
    strategy: RollingUpdate
  image:
    repository: fallenbagel/jellyseerr
    tag: 1.5.0
  env:
    TZ: Europe/Berlin
    PUID: 1000
    PGID: 1000
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
  service:
    main:
      ports:
        http:
          port: &port 5055
  probes:
    liveness: &probes
      enabled: true
      custom: true
      spec:
        httpGet:
          path: /ping
          port: *port
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3
    readiness: *probes
    startup:
      enabled: false
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.cloudton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host "jellyseerr.cloudton.de"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: jellyseerr-tls-certificate
          hosts:
            - *host


######################
# Prowlarr           #
######################

prowlarr:
  global:
    nameOverride: prowlarr
  controller:
    strategy: RollingUpdate
  image:
    repository: ghcr.io/linuxserver/prowlarr
    tag: version-1.4.1.3258
  env:
    TZ: Europe/Berlin
    PUID: 1000
    PGID: 1000
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
  service:
    main:
      ports:
        http:
          port: &port 9696
  probes:
    liveness: &probes
      enabled: true
      custom: true
      spec:
        httpGet:
          path: /ping
          port: *port
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3
    readiness: *probes
    startup:
      enabled: false
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.cloudton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host "prowlarr.cloudton.de"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: prowlarr-tls-certificate
          hosts:
            - *host


######################
# Radarr             #
######################

radarr:
  global:
    nameOverride: radarr
  controller:
    strategy: RollingUpdate
  image:
    repository: ghcr.io/linuxserver/radarr
    tag: version-4.4.4.7068
  env:
    TZ: Europe/Berlin
    PUID: 1000
    PGID: 1000
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
    filme:
      enabled: true
      existingClaim: servarr-jellyfin-filme
      mountPath: /filme
  service:
    main:
      ports:
        http:
          port: &port 7878
  probes:
    liveness: &probes
      enabled: true
      custom: true
      spec:
        httpGet:
          path: /ping
          port: *port
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3
    readiness: *probes
    startup:
      enabled: false
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.cloudton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host "radarr.cloudton.de"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: radarr-tls-certificate
          hosts:
            - *host


######################
# Sonarr             #
######################

sonarr:
  global:
    nameOverride: sonarr
  controller:
    strategy: RollingUpdate
  image:
    repository: ghcr.io/linuxserver/sonarr
    tag: version-3.0.10.1567
  env:
    TZ: Europe/Berlin
    PUID: 1000
    PGID: 1000
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
    serien:
      enabled: true
      existingClaim: servarr-jellyfin-serien
      mountPath: /serien
  service:
    main:
      ports:
        http:
          port: &port 8989
  probes:
    liveness: &probes
      enabled: true
      custom: true
      spec:
        httpGet:
          path: /ping
          port: *port
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3
    readiness: *probes
    startup:
      enabled: false
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.cloudton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host "sonarr.cloudton.de"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: sonarr-tls-certificate
          hosts:
            - *host
